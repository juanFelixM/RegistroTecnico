@page "/Cliente/Edit/{ClienteId:int}"
@inject ClientesServices ClientesService
@inject TecnicosServices tecnicosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer


<PageTitle>Editar Cliente</PageTitle>
<EditForm Model="Cliente" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">
                    Editar cliente
                </h5>
            </div>
            <div class="card-body">

                @*ClienteId*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>ClienteId</strong>
                    </label>
                    <InputNumber class="form-control" @bind-Value="Cliente.ClienteId" readonly />
                </div>

                @*Fecha de Ingreso*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Fecha de Ingreso</strong>
                    </label>
                    <InputDate class="form-control" @bind-Value="Cliente.FechaIngreso"/>
                </div>

                @*Nombres*@
                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="Cliente.Nombres" />
                    <ValidationMessage For="@(() => Cliente.Nombres)" />
                </div>

                @*Dirección*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Direcci&oacute;n</strong>
                    </label>
                    <InputText class="form-control" @bind-Value="Cliente.Direccion" />
                </div>

                @*Rnc*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>RNC</strong>
                    </label>
                    <InputText class="form-control" @bind-Value="Cliente.RNC" />
                    <ValidationMessage For="@(()=> Cliente.RNC)" />
                </div>

                @*Limite de Credito*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>L&iacute;mite cr&eacute;dito</strong>
                    </label>
                    <InputNumber class="form-control" @bind-Value="Cliente.LimiteCredito" />
                    <ValidationMessage For="@(()=>Cliente.LimiteCredito)" />
                </div>

                @*Técnico Encargado*@
                <div class="mb-3">
                    <label>
                        <strong>T&eacute;cnico encargado</strong>
                    </label>
                    <InputSelect class="form-control form-select" @bind-Value="@Cliente.TecnicoEncargadoId">
                        <option value="0" selected disabled>Seleccione un T&eacute;cnico</option>
                        @foreach (var tecnico in ListaTecnicos)
                        {
                            <option value="@tecnico?.TecnicoId">@tecnico.Nombres</option>
                        }
                    </InputSelect>
                </div>

                @*Footer*@
                <div class="card-footer mt-2 text-center">
                    <div class="btn-group" role="group">
                        <a href="/Cliente/Delete/@ClienteId" class="btn btn-outline-primary bi bi-trash"> Eliminar</a>
                        <button type="submit" class="btn btn-outline-success bi bi-floppy"> Guardar</button>
                        <a href="/Cliente/Index" class="btn btn-outline-secondary"><span class="bi bi-arrow-left"></span> Volver</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int ClienteId { get; set; }
    @*Instanciar Cliente*@
    private Clientes Cliente { get; set; } = new Clientes();
    @*Lista de técnicos*@
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();

    protected override async Task OnInitializedAsync()
    {
        Cliente = await ClientesService.Buscar(ClienteId);
        ListaTecnicos = await tecnicosServices.Listar(c => c.TecnicoId > 0);
    }

    @*Mensaje de Error*@
    public string MensajeError { get; set; } = string.Empty;

    @*Método Modificar*@
    private async Task Modificar()
    {

        if (await ValidarNombre())
        {
            MensajeError = "Ya existe un cliente con ese nombre";
            return;
        }
        if (await ValidarRnc())
        {
            MensajeError = "Ya existe un cliente con ese Rnc.";
            return;
        }


        var creado = await ClientesService.Guardar(Cliente);
        if (creado)
        {
            navigationManager.NavigateTo("/Cliente/Index");
        }
    }

    @*Metodo que valida si existe Nombre*@
    public async Task<bool> ValidarNombre()
    {
        var existe = await ClientesService.ExisteNombre(Cliente.ClienteId, Cliente.Nombres);
        return existe;
    }

    @*Metodo que valida si existe Rnc*@
    public async Task<bool> ValidarRnc()
    {
        var existe =
        await ClientesService.ExisteRnc(Cliente.ClienteId, Cliente.RNC);
        return existe;
    }
}
